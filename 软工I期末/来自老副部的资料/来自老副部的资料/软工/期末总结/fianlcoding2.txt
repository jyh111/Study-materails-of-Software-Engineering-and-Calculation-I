public class TestNaN {

	public static void main(String[] args) {
		// An example of overflow:
		double d = 1e308;
		System.out.print("overflow produces infinity: ");
		System.out.println(d + "*10==" + d * 10);
		double d2=1e10;
		double d3=10000000000.0;
		System.out.println("Double number:"+d2+"transform to int"+(int)d2+"TramsTolong"+(long)(d2)+"Doble 10000000000.0"+d3);
		// An example of gradual underflow:
		d = 1e-305 * Math.PI;
		System.out.print("gradual underflow: " + d + "\n ");
		for (int i = 0; i < 4; i++)
			System.out.print(" " + (d /= 100000));
		System.out.println();
		// An example of NaN:
		System.out.print("0.0/0.0 is Not-a-Number: ");
		d = 0.0 / 0.0;
		System.out.println(d);
		// An example of inexact results and rounding:
		System.out.print("inexact results with float:");
		for (int i = 0; i < 100; i++) {
			float z = 1.0f / i;
			if (z * i != 1.0f)
				System.out.print(" " + i);
		}
		System.out.println();
		// Another example of inexact results and rounding:
		System.out.print("inexact results with double:");
		for (int i = 0; i < 100; i++) {
			double z = 1.0 / i;
			if (z * i != 1.0)
				System.out.print(" " + i);
		}
		System.out.println();
		// An example of cast to integer rounding:
		System.out.print("cast to int rounds toward 0: ");
		d = 12345.6;
		System.out.println((int) d + " " + (int) (-d));
	}
}
/*
OUTput
overflow produces infinity: 1.0E308*10==Infinity
Double number:1.0E10transform to int2147483647TramsTolong10000000000Doble 10000000000.01.0E10
gradual underflow: 3.141592653589793E-305
  3.1415926535898E-310 3.141592653E-315 3.142E-320 0.0
0.0/0.0 is Not-a-Number: NaN
inexact results with float: 0 41 47 55 61 82 83 94 97
inexact results with double: 0 49 98
cast to int rounds toward 0: 12345 -12345

*/
package Chap06;

/**
 * 2013.03.25
 * Michel
 */
import java.util.*;
public class DotCom {
	private ArrayList<String> locationCells;
	private String name;
	
	public void setLocationCells(ArrayList<String> loc){
		locationCells = loc;
	}
	
	public void setName(String n){
		name = n;
	}
	
	public String checkYourself(String userInput){
		String result = "miss";
		int index = locationCells.indexOf(userInput);
		if(index>=0){
			locationCells.remove(index);
			
			if(locationCells.isEmpty()){
				result = "kill";
				System.out.println("Ouch! You sunk " + name + " :(");
			} else {
				result = "hit";
			}
		} 
		return result;
	}
}
package Chap06;

/**
 * 2013.03.25
 * Michel
 */
import java.util.*;
public class DotComBust {
	private GameHelper helper = new GameHelper();
	private ArrayList<DotCom> dotComsList = new ArrayList<DotCom>();
	private int numOfGuesses = 0;
	
	private  void setUpGame(){
		// first make some dot coms and give them locations
		DotCom one = new DotCom();
		one.setName("Pets.com");
		DotCom two = new DotCom();
		two.setName("eToys.com");
		DotCom three = new DotCom();
		three.setName("Go2.com");
		dotComsList.add(one);
		dotComsList.add(two);
		dotComsList.add(three);
		
		System.out.println("Your goal is to sink three dot coms");
		System.out.println("pets.com, eToys.com, Go2.com");
		System.out.println("Try to sink them all in the fewest number of guesses");
		
		for(DotCom dotComToSet : dotComsList){
			ArrayList<String> newLocation = helper.placeDotCom(3);
			dotComToSet.setLocationCells(newLocation);
		}
	}
	
	private void startPlaying(){
		while(!dotComsList.isEmpty()){
			String userGuess = helper.getUserInput("Enter a guess");
			checkUserGuess(userGuess);
		}
		finishGame();
	}
	
	private void checkUserGuess(String userGuess){
		numOfGuesses++;
		String result ="miss";
		
		for(DotCom dotComToTest:dotComsList){
			result = dotComToTest.checkYourself(userGuess);
			if(result.equals("hit")){
				break;
			}
			if(result.equals("kill")){
				dotComsList.remove(dotComToTest);
				break;
			}
		}
		System.out.println(result);
	}
	
	private void finishGame(){
		System.out.println("All Dot Coms are dead! Your stock is now worthless.");
		if(numOfGuesses<=18){
			System.out.println("It only took you " + numOfGuesses + " guesses.");
			System.out.println(" You got out before your options sank.");
		} else {
			System.out.println("Took you long enough." + numOfGuesses + " guessed.");
		}
	}
	
	public static void main(String[] args){
		DotComBust game = new DotComBust();
		game.setUpGame();
		game.startPlaying();
	}
}
package Chap06;

/**
 * 2013.03.25
 * Michel
 * 用于接收用户输入
 */
import java.io.*;
import java.util.*;

public class GameHelper {

  private static final String alphabet = "abcdefg";
  private int gridLength = 7;
  private int gridSize = 49;
  private int [] grid = new int[gridSize];
  private int comCount = 0;


  public String getUserInput(String prompt) {
     String inputLine = null;
     System.out.print(prompt + "  ");
     try {
       BufferedReader is = new BufferedReader(
	 new InputStreamReader(System.in));
       inputLine = is.readLine();
       if (inputLine.length() == 0 )  return null; 
     } catch (IOException e) {
       System.out.println("IOException: " + e);
     }
     return inputLine.toLowerCase();
  }

   
 public ArrayList<String> placeDotCom(int comSize) {       
    ArrayList<String> alphaCells = new ArrayList<String>();
    //String [] alphacoords = new String [comSize];      // 保存字符串
    String temp = null;                                // 临时字符串
    int [] coords = new int[comSize];                  // 现有字符串
    int attempts = 0;                                  // 目前测试的字符串
    boolean success = false;                           // flag = 找到了合适的字符吗 ?
    int location = 0;                                  // 目前起点
    
    comCount++;                                      
    int incr = 1;                                       
    if ((comCount % 2) == 1) {                          
      incr = gridLength;                               
    }

    while ( !success & attempts++ < 200 ) {           
	location = (int) (Math.random() * gridSize);      
        //System.out.print(" try " + location);
	int x = 0;                                        
        success = true;                               
        while (success && x < comSize) {              
          if (grid[location] == 0) {                   
             coords[x++] = location;                   
             location += incr;                           
             if (location >= gridSize){                  
               success = false;                          
             }
             if (x>0 & (location % gridLength == 0)) {   
               success = false;                         
             }
          } else {                                     
              // System.out.print(" used " + location);  
              success = false;                           
          }
        }
    }                                                 

    int x = 0;                                          
    int row = 0;
    int column = 0;
    // System.out.println("\n");
    while (x < comSize) {
      grid[coords[x]] = 1;                              // mark master grid pts. as 'used'
      row = (int) (coords[x] / gridLength);             // get row value
      column = coords[x] % gridLength;                  // get numeric column value
      temp = String.valueOf(alphabet.charAt(column));   // convert to alpha
      
      alphaCells.add(temp.concat(Integer.toString(row)));
      x++;

      // System.out.print("  coord "+x+" = " + alphaCells.get(x-1));
      
    }
    // System.out.println("\n");
    
    return alphaCells;
   }
}
